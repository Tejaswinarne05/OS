#include <stdio.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

void worstFit(int blockSizes[], int blockCount, int processSizes[], int processCount) {
    int allocation[MAX_PROCESSES];
    
    for (int i = 0; i < processCount; i++) {
        allocation[i] = -1;
    }

    for (int i = 0; i < processCount; i++) {
        int worstIndex = -1;

        for (int j = 0; j < blockCount; j++) {
            if (blockSizes[j] >= processSizes[i]) {
                if (worstIndex == -1 || blockSizes[j] > blockSizes[worstIndex]) {
                    worstIndex = j;
                }
            }
        }

        if (worstIndex != -1) {
            allocation[i] = worstIndex;
            blockSizes[worstIndex] -= processSizes[i];
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < processCount; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSizes[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int blockCount, processCount;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &blockCount);

    int blockSizes[MAX_BLOCKS];
    printf("Enter the sizes of the memory blocks:\n");
    for (int i = 0; i < blockCount; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSizes[i]);
    }

    printf("\nEnter the number of processes: ");
    scanf("%d", &processCount);

    int processSizes[MAX_PROCESSES];
    printf("Enter the sizes of the processes:\n");
    for (int i = 0; i < processCount; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSizes[i]);
    }

    worstFit(blockSizes, blockCount, processSizes, processCount);

    return 0;
}
