#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 5

// Structure to store memory block and process size
struct block {
    int size;
    int is_allocated;
};

struct process {
    int size;
    int allocated_block;
};

void first_fit(struct block blocks[], int block_count, struct process processes[], int process_count) {
    for (int i = 0; i < process_count; i++) {
        for (int j = 0; j < block_count; j++) {
            if (!blocks[j].is_allocated && blocks[j].size >= processes[i].size) {
                processes[i].allocated_block = j;
                blocks[j].is_allocated = 1;
                printf("Process %d allocated to Block %d (First Fit)\n", i+1, j+1);
                break;
            }
        }
    }
}

void best_fit(struct block blocks[], int block_count, struct process processes[], int process_count) {
    for (int i = 0; i < process_count; i++) {
        int best_index = -1;
        int best_size = 99999; // A large number to find the smallest suitable block
        for (int j = 0; j < block_count; j++) {
            if (!blocks[j].is_allocated && blocks[j].size >= processes[i].size && blocks[j].size < best_size) {
                best_size = blocks[j].size;
                best_index = j;
            }
        }
        if (best_index != -1) {
            processes[i].allocated_block = best_index;
            blocks[best_index].is_allocated = 1;
            printf("Process %d allocated to Block %d (Best Fit)\n", i+1, best_index+1);
        }
    }
}

void worst_fit(struct block blocks[], int block_count, struct process processes[], int process_count) {
    for (int i = 0; i < process_count; i++) {
        int worst_index = -1;
        int worst_size = -1; // A small number to find the largest suitable block
        for (int j = 0; j < block_count; j++) {
            if (!blocks[j].is_allocated && blocks[j].size >= processes[i].size && blocks[j].size > worst_size) {
                worst_size = blocks[j].size;
                worst_index = j;
            }
        }
        if (worst_index != -1) {
            processes[i].allocated_block = worst_index;
            blocks[worst_index].is_allocated = 1;
            printf("Process %d allocated to Block %d (Worst Fit)\n", i+1, worst_index+1);
        }
    }
}

int main() {
    struct block blocks[MAX_BLOCKS] = {
        {100, 0}, {500, 0}, {200, 0}, {300, 0}, {600, 0}
    };

    struct process processes[MAX_PROCESSES] = {
        {212, -1}, {417, -1}, {112, -1}, {426, -1}, {400, -1}
    };

    printf("First Fit Allocation:\n");
    first_fit(blocks, 5, processes, 5);
    printf("\n");

    // Reset blocks for next allocation
    for (int i = 0; i < 5; i++) blocks[i].is_allocated = 0;

    printf("Best Fit Allocation:\n");
    best_fit(blocks, 5, processes, 5);
    printf("\n");

    // Reset blocks for next allocation
    for (int i = 0; i < 5; i++) blocks[i].is_allocated = 0;

    printf("Worst Fit Allocation:\n");
    worst_fit(blocks, 5, processes, 5);

    return 0;
}
